ccm.component({name:"bugtrackerMwe",config:{html:[ccm.store,{local:"http://moritzkemp.github.io/bugtracker-mwe/resources/js/overviewTemplate.json"}],remoteStore:[ccm.store,{store:"bugtracker2",url:"http://ccm2.inf.h-brs.de/index.js"}],style:[ccm.load,"http://moritzkemp.github.io/bugtracker-mwe/resources/css/bug.css"],icons:[ccm.load,"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css"],inputData:{store:[ccm.store,"http://moritzkemp.github.io/bugtracker-mwe/resources/js/input.json"],key:"bugInput"},knockout:[ccm.load,"https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js"]},Instance:function(){var t,e=this;e.init=function(o){t=ccm.helper.privatize(e,"remoteStore","knockout"),o&&o()};var o=function(t){this.key=t.key,this.bugId=ko.observable(t.bugId),this.name=ko.observable(t.name),this.subscriber=ko.observable(t.subscriber),this.color=ko.observable(t.color),this.description=ko.observable(t.description),this.state=ko.observable(t.state),this.priority=ko.observable(t.priority),this.edit=ko.observable(!1)},r=function(){that=this,that.bugs=ko.observableArray([]),that.currentView=ko.observable(0),that.bugSorting=ko.observable(1),that.bugStates=ko.observableArray(["open","pending","closed"]),that.editBug=function(t){t.edit(!0)},that.approveChange=function(t){t.edit(!1),e.storeBug(ko.toJS(t))},that.editToggle=function(t){t.edit()?t.edit()&&that.approveChange(t):that.editBug(t)},that.removeBug=function(t){that.bugs.remove(t),e.removeBug(ko.toJS(t))},that.submitNewBugHandler=function(t,r){e.storeBug(r.bug),that.bugs.push(new o(r.bug)),that.currentView(0)},that.sortBugs=function(){switch(that.bugSorting()){case-1:that.bugs.sort(function(t,e){return"open"===t.state()||"closed"===e.state()?-1:t.state===e.state?0:1});break;case 1:that.bugs.sort(function(t,e){return"open"===t.state()||"closed"===e.state()?1:t.state()===e.state()?0:-1})}that.bugSorting(-1*that.bugSorting())},that.renderInputView=function(){e.inputComponent.render(),that.currentView(1)},that.renderOverview=function(){that.currentView(0)},t.remoteStore.get(function(t){var e=$.map(t,function(t){return new o(t)});that.bugs(e)})};e.render=function(t){var o=ccm.helper.element(e),n=$(ccm.helper.html(e.html.get("main")));o.html(n),ccm.instance("https://akless.github.io/ccm-components/resources/input/ccm.input.js",{element:ccm.helper.find(e,".input-comp-area"),data:e.inputData,fieldset:"Add bug",onFinish:function(t){var o=(new Date).getTime();t.bugId=o,t.key=o;var r=$.Event("newBug",{bug:t});ccm.helper.find(e,".input-comp-area").trigger(r)}},function(t){e.inputComponent=t}),ko.applyBindings(new r),t&&t()},e.storeBug=function(e){var o={key:e.key,bugId:e.bugId,name:e.name,priority:e.priority,subscriber:e.subscriber,state:e.state,description:e.description,color:e.color};$.each(o,function(t,e){o[t]=ccm.helper.noScript(e)}),t.remoteStore.set(o,function(t){console.log(t)})},e.removeBug=function(e){e.key?t.remoteStore.del(e.key,function(){console.log("Delete bug with key "+e.key)}):console.log("Bug not persisted yet. Skip delete request.")}}});