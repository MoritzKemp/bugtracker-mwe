ccm.component({name:"bugtrackerMwe",config:{html:[ccm.store,{local:"http://moritzkemp.github.io/bugtracker-mwe/resources/js/overviewTemplate.json"}],remoteStore:[ccm.store,{store:"bugtracker2",url:"http://ccm2.inf.h-brs.de/index.js"}],style:[ccm.load,"http://moritzkemp.github.io/bugtracker-mwe/resources/css/bug.css"],icons:[ccm.load,"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css"],inputData:{store:[ccm.store,"http://moritzkemp.github.io/bugtracker-mwe/resources/js/input.json"],key:"bugInput"},knockout:[ccm.load,"https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js"]},Instance:function(){var e,t=this;t.init=function(o){e=ccm.helper.privatize(t,"remoteStore","knockout"),o&&o()};var o=function(e){this.key=e.key,this.bugId=ko.observable(e.bugId),this.name=ko.observable(e.name),this.subscriber=ko.observable(e.subscriber),this.color=ko.observable(e.color),this.description=ko.observable(e.description),this.state=ko.observable(e.state),this.priority=ko.observable(e.priority),this.edit=ko.observable(!1)},r=function(){var r=this;r.bugs=ko.observableArray([]),r.currentView=ko.observable(0),r.bugSorting=ko.observable(1),r.bugStates=ko.observableArray(["open","pending","closed"]),r.editBug=function(e){e.edit(!0)},r.approveChange=function(e){e.edit(!1),t.storeBug(ko.toJS(e))},r.editToggle=function(e){e.edit()?e.edit()&&r.approveChange(e):r.editBug(e)},r.removeBug=function(e){r.bugs.remove(e),t.removeBug(ko.toJS(e))},r.submitNewBugHandler=function(e,n){t.storeBug(n.bug),r.bugs.push(new o(n.bug)),r.currentView(0)},r.sortBugs=function(){switch(r.bugSorting()){case-1:r.bugs.sort(function(e,t){return"open"===e.state()||"closed"===t.state()?-1:e.state===t.state?0:1});break;case 1:r.bugs.sort(function(e,t){return"open"===e.state()||"closed"===t.state()?1:e.state()===t.state()?0:-1})}r.bugSorting(-1*r.bugSorting())},r.renderInputView=function(){t.inputComponent.render(),r.currentView(1)},r.renderOverview=function(){r.currentView(0)},e.remoteStore.get(function(e){var t=$.map(e,function(e){return new o(e)});r.bugs(t)})};t.render=function(e){var o=ccm.helper.element(t),n=$(ccm.helper.html(t.html.get("main")));o.html(n),ccm.instance("https://akless.github.io/ccm-components/resources/input/ccm.input.js",{element:ccm.helper.find(t,".input-comp-area"),data:t.inputData,fieldset:"Add bug",onFinish:function(e){var o=(new Date).getTime();e.bugId=o,e.key=o;var r=$.Event("newBug",{bug:e});ccm.helper.find(t,".input-comp-area").trigger(r)}},function(e){t.inputComponent=e}),ko.applyBindings(new r),e&&e()},t.storeBug=function(t){var o={key:t.key,bugId:t.bugId,name:t.name,priority:t.priority,subscriber:t.subscriber,state:t.state,description:t.description,color:t.color};$.each(o,function(e,t){o[e]=ccm.helper.noScript(t)}),e.remoteStore.set(o,function(e){console.log(e)})},t.removeBug=function(t){t.key?e.remoteStore.del(t.key,function(){console.log("Delete bug with key "+t.key)}):console.log("Bug not persisted yet. Skip delete request.")}}});